// Paste these into Firebase Console > Firestore Rules when you're ready
// This template supports both admins/{uid}.active and users/{uid}.role == 'admin'
// Adjust as needed.

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdminsDocAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.active == true;
    }
    function isRoleAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isAdmin() { return isAdminsDocAdmin() || isRoleAdmin(); }

    match /users/{uid} {
      // Allow the user to see/update their own profile
      allow read, create, update: if isSignedIn() && request.auth.uid == uid;
      // Allow admins to list and read all users
      allow read: if isAdmin();
      // Allow admins to update user roles
      allow update: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      allow delete: if false;
    }

    match /payments/{doc} {
      allow create: if isSignedIn();
      // Admins can read; users can read their own by email
      allow read: if isAdmin() || (isSignedIn() && resource.data.email == request.auth.token.email);
      // Allow public read for latest purchases display
      allow read: if true;
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /admins/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow write: if false;
    }

    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();

      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn()
          && request.resource.data.uid == request.auth.uid
          && request.resource.data.rating is number
          && request.resource.data.rating >= 1
          && request.resource.data.rating <= 5
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0;
        allow update, delete: if false;
      }
    }

    // Coupons collection - admins can manage, users can read active ones
    match /coupons/{couponId} {
      allow read: if true; // Anyone can read coupons to check validity
      allow create, update, delete: if isAdmin();
    }

    // Coupon usage tracking - anyone can create (for payment tracking), admins can read
    match /couponUsage/{usageId} {
      allow create: if isSignedIn(); // Allow creation during payment processing
      allow read, update, delete: if isAdmin();
    }

    // Contact messages - anyone can create, admins can read
    match /contacts/{contactId} {
      allow create: if true; // Anyone can submit contact form
      allow read, update, delete: if isAdmin();
    }

    // Promoters collection - admins can manage, public can read
    match /promoters/{promoterId} {
      allow read: if true; // Anyone can read promoter info
      allow create, update, delete: if isAdmin();
    }

    // Wallet transactions - users can read their own, create entries for their own userId; admins full access
    match /walletTransactions/{txId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // Profit distributions - admins can create and read
    match /profitDistributions/{distId} {
      allow create, read, update, delete: if isAdmin();
    }

    // Profit deductions - admins can create and read
    match /profitDeductions/{deductId} {
      allow create, read, update, delete: if isAdmin();
    }

    // Spin codes - users can create and read their own, admins full access
    match /spinCodes/{codeId} {
      allow create: if isAdmin() || (isSignedIn() && request.resource.data.userId == request.auth.uid);
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Balance codes - admins can create and manage, users can read their own
    match /balanceCodes/{codeId} {
      allow create: if isAdmin();
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Wallet top-ups - users can create their own, admins can manage all
    match /walletTopups/{topupId} {
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userEmail == request.auth.token.email
        && request.resource.data.amount is number
        && request.resource.data.amount > 0
        && request.resource.data.paymentMethod is string
        && request.resource.data.status == 'pending'
        && request.resource.data.type == 'wallet_topup';
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow update: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }

  }
}
